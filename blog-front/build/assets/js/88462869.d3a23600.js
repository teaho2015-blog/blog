"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5328],{8804:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(3274),i=t(1780);const a={slug:"article/java-container-args",title:"\u5bb9\u5668\u73af\u5883\u4e0b\u7684\u76f8\u5173JVM\u53c2\u6570",date:new Date("2021-11-30T00:00:00.000Z"),authors:"teaho2015",tags:["java"],keywords:["java"],description:"\u73b0\u5728\u662f\u4e91\u539f\u751f\u65f6\u4ee3\uff0c\u6211\u4eec\u5728\u65e5\u5e38\u4e2d\u591a\u5c11\u4f1a\u78b0\u5230\u5bb9\u5668\uff0c\u6765\u8ba9\u6211\u4eec\u770b\u770bJVM\u5bf9\u5bb9\u5668\u73af\u5883\u7684\u652f\u6301\u5427\u3002",image:"/img/blog/java-container-args/header.jpg",sticky:1},o=void 0,s={permalink:"/article/java-container-args",editUrl:"https://github.com/teaho2015-blog/blog/edit/main/blog/code/java-container-args/java-container-args.md",source:"@site/blog/code/java-container-args/java-container-args.md",title:"\u5bb9\u5668\u73af\u5883\u4e0b\u7684\u76f8\u5173JVM\u53c2\u6570",description:"\u73b0\u5728\u662f\u4e91\u539f\u751f\u65f6\u4ee3\uff0c\u6211\u4eec\u5728\u65e5\u5e38\u4e2d\u591a\u5c11\u4f1a\u78b0\u5230\u5bb9\u5668\uff0c\u6765\u8ba9\u6211\u4eec\u770b\u770bJVM\u5bf9\u5bb9\u5668\u73af\u5883\u7684\u652f\u6301\u5427\u3002",date:"2021-11-30T00:00:00.000Z",formattedDate:"November 30, 2021",tags:[{label:"java",permalink:"/tags/java"}],readingTime:7.666666666666667,hasTruncateMarker:!0,authors:[{name:"teaho2015",title:"teaho2015",url:"https://github.com/teaho2015",imageURL:"/img/logo.png",key:"teaho2015"}],frontMatter:{slug:"article/java-container-args",title:"\u5bb9\u5668\u73af\u5883\u4e0b\u7684\u76f8\u5173JVM\u53c2\u6570",date:"2021-11-30T00:00:00.000Z",authors:"teaho2015",tags:["java"],keywords:["java"],description:"\u73b0\u5728\u662f\u4e91\u539f\u751f\u65f6\u4ee3\uff0c\u6211\u4eec\u5728\u65e5\u5e38\u4e2d\u591a\u5c11\u4f1a\u78b0\u5230\u5bb9\u5668\uff0c\u6765\u8ba9\u6211\u4eec\u770b\u770bJVM\u5bf9\u5bb9\u5668\u73af\u5883\u7684\u652f\u6301\u5427\u3002",image:"/img/blog/java-container-args/header.jpg",sticky:1},unlisted:!1,prevItem:{title:"Sentinel core\u539f\u7406\u5206\u6790",permalink:"/article/sentinel-core"},nextItem:{title:"Java\u6a21\u5757\u5316",permalink:"/article/java-modular"}},c={authorsImageUrls:[void 0]},p=[{value:"\u5386\u53f2",id:"\u5386\u53f2",level:3},{value:"\u7528\u6cd5",id:"\u7528\u6cd5",level:2},{value:"java\u7248\u672c &lt; 8u121",id:"java\u7248\u672c--8u121",level:3},{value:"8u121 &lt; java\u7248\u672c &lt; 8u191",id:"8u121--java\u7248\u672c--8u191",level:3},{value:"java\u7248\u672c &gt;=8u191",id:"java\u7248\u672c-8u191",level:3},{value:"OpenJDK\u76f8\u5173\u6e90\u7801\u89e3\u8bfb",id:"openjdk\u76f8\u5173\u6e90\u7801\u89e3\u8bfb",level:2},{value:"reference",id:"reference",level:2}];function m(n){const e={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:["\u73b0\u5728\u662f\u4e91\u539f\u751f\u65f6\u4ee3\u3002\u4f5c\u4e3a\u5f00\u53d1\u7684\u6211\uff08\u4eec\uff09\u6216\u591a\u8bf4\u5c11\u5728\u5e73\u5e38\u548c\u5de5\u4f5c\u4e2d\u548cdocker\u6216k8s\u6253\u8fc7\u4ea4\u9053\u3002\u800c\u4f5c\u4e3aJAVA\u5f00\u53d1\u8005\uff0c\u6211\u4eec\u591a\u5c11\u4f1a\u5bf9JVM\u53c2\u6570\u8fdb\u884c\u8c03\u4f18\u3002",(0,r.jsx)(e.br,{}),"\n","\u4e0d\u77e5\u9053\u5927\u5bb6\u6709\u6ca1\u6709\u9047\u5230\u8fc7\u7c7b\u4f3c\u60c5\u51b5\uff1a\u5728\u5bb9\u5668\u73af\u5883\u4e0b\uff0c\u8bbe\u7f6e-Xmx\u62a5\u9519\u3002",(0,r.jsx)(e.br,{}),"\n","\u4e0d\u7ba1\u6709\u6728\u6709\uff0c\u4eca\u5929\u6211\u4eec\u6765\u63a2\u7a76\u4e0b\uff0c\u5bb9\u5668\u73af\u5883\u4e0b\u5982\u4f55\u8bbe\u7f6eJAVA\u53c2\u6570\u3002"]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(e.h3,{id:"\u5386\u53f2",children:"\u5386\u53f2"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"JDK8u121\u52a0\u5165\u4e86UseCGroupMemoryLimitForHeap\u8fd9\u4e00\u53c2\u6570\uff0c\u5bf9\u5bb9\u5668\u5185\u5b58\u8bbe\u7f6e\u505a\u652f\u6301\u3002(JDK-8170888)"}),"\n",(0,r.jsxs)(e.li,{children:["JDK8u191\u540e\u52a0\u5165\u4e86UseContainerSupport\u3001MaxRAMPercentage\u3001MinRAMPercentage\u3001InitialRAMPercentage\u53c2\u6570\u3002",(0,r.jsx)(e.br,{}),"\n","deprecate\u4e86UseCGroupMemoryLimitForHeap\u3001MaxRAMFraction\u3001MinRAMFraction\u3001InitialRAMFraction\u53c2\u6570\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"\u7528\u6cd5",children:"\u7528\u6cd5"}),"\n",(0,r.jsx)(e.p,{children:"\u5efa\u8bae\u4f7f\u7528\u5927\u4e8e8u191\u7248\u672c\u7684JAVA\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u8fd9\u91cc\u5217\u4e3e\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\uff0c\u65b9\u4fbf\u4e0b\u6587\u8bf4\u660e\u3002"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram|initialram"\n    uintx DefaultMaxRAMFraction                     = 4                                   {product}  //\u9ed8\u8ba4\u7684\u5806\u5185\u5b58\u7cfb\u6570\n    uintx InitialRAMFraction                        = 64                                  {product}  //\u521d\u59cb\u5316\u5806\u5185\u5b58\u7cfb\u6570\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u673a\u5668\uff08\u5bb9\u5668\uff09\u5185\u5b58/InitialRAMFraction=\u521d\u59cb\u5316\u5806\u5185\u5b58\u5185\u5b58\n   double InitialRAMPercentage                      = 1.562500                            {product}  //\u521d\u59cb\u5316\u5806\u5185\u5b58\u767e\u5206\u6bd4\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u673a\u5668\uff08\u5bb9\u5668\uff09\u5185\u5b58*InitialRAMPercentage/100=\u521d\u59cb\u5316\u5806\u5185\u5b58\u5927\u5c0f\n    uintx MaxHeapSize                              := 4139778048                          {product}  //\u5806\u7684\u9ed8\u8ba4\u6700\u5927\u503c\n uint64_t MaxRAM                                    = 137438953472                        {pd product} //\u548cMaxHeapSize\u4e00\u8d77\uff0c\u7528\u4e8e\u8fd0\u884c\u65f6MaxHeapSize\u7684\u8ba1\u7b97\n    uintx MaxRAMFraction                            = 4                                   {product}  //\u6700\u5927\u7684\u5806\u5185\u5b58\u7cfb\u6570\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u673a\u5668\uff08\u5bb9\u5668\uff09\u5185\u5b58/MaxRAMFraction=\u6700\u5927\u5806\u5185\u5b58\n   double MaxRAMPercentage                          = 25.000000                           {product}  //\u6700\u5927\u7684\u5806\u5185\u5b58\u767e\u5206\u6bd4\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u673a\u5668\uff08\u5bb9\u5668\uff09\u5185\u5b58*MaxRAMPercentage/100=\u6700\u5927\u5806\u5185\u5b58\n'})}),"\n",(0,r.jsx)(e.h3,{id:"java\u7248\u672c--8u121",children:"java\u7248\u672c < 8u121"}),"\n",(0,r.jsx)(e.p,{children:"\u4e0d\u8981\u5728\u5bb9\u5668\u5316\u73af\u5883\u4f7f\u7528\u3002"}),"\n",(0,r.jsx)(e.h3,{id:"8u121--java\u7248\u672c--8u191",children:"8u121 < java\u7248\u672c < 8u191"}),"\n",(0,r.jsxs)(e.p,{children:["\u5982\u679c\u662f\u4f7f\u7528OracleJDK\u9700\u8981\u989d\u5916\u5f00\u542f\u5b9e\u9a8c\u53c2\u6570\n",(0,r.jsx)(e.code,{children:"-XX:UnlockExperimentalVMOptions"}),"\u3002"]}),"\n",(0,r.jsx)(e.p,{children:"\u5efa\u8bae\u4f7f\u7528\u5982\u4e0b\u53c2\u6570\uff1a"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"-XX:UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=2 -XX:MinRAMFraction=2\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u6216\u81ea\u884c\u8bbe\u7f6e"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"-Xmx:{\u7528\u6237\u81ea\u5b9a\u4e49} \n"})}),"\n",(0,r.jsx)(e.h3,{id:"java\u7248\u672c-8u191",children:"java\u7248\u672c >=8u191"}),"\n",(0,r.jsxs)(e.p,{children:["JDK8u191\u540e\u65b0\u589e\u4e86\u5bb9\u5668\u652f\u6301\u5f00\u5173",(0,r.jsx)(e.code,{children:"-XX:UseContainerSupport"}),"\uff0c\u5e76\u4e14\u9ed8\u8ba4\u5f00\u542f\u3002",(0,r.jsx)(e.br,{}),"\n","\u5e76\u589e\u52a0\u4e86\u8fd9\u4e9b\u53c2\u6570\uff1a"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"MaxRAMPercentage \u5806\u7684\u6700\u5927\u503c\u767e\u5206\u6bd4\u3002"}),"\n",(0,r.jsx)(e.li,{children:"InitialRAMPercentage \u5806\u7684\u521d\u59cb\u5316\u7684\u767e\u5206\u6bd4\u3002"}),"\n",(0,r.jsx)(e.li,{children:"MinRAMPercentage \u5806\u7684\u6700\u5c0f\u503c\u7684\u767e\u5206\u6bd4\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u5efa\u8bae\u4f7f\u7528\u5185\u5b58\u53c2\u6570\u53c2\u6570\uff1a"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"-XX:MaxRAMPercentage=70.0 -XX:InitialRAMPercentage=50.0\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\u8ba1\u7b97\u65b9\u6cd5\uff08\u8fd9\u91cc\u505a\u4e86\u7b80\u5316\uff0c\u5b9e\u9645\u8ba1\u7b97\u8981\u590d\u6742\u4e9b\uff09\uff1a",(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.code,{children:"\u6700\u5927\u5806\u5927\u5c0f = MaxRAM\uff08\u9ed8\u8ba4\u4e3a\u5bb9\u5668\u6700\u5927\u53ef\u4f7f\u7528\u5185\u5b58\uff09 * MaxRAMPercentage / 100"}),"\u3002"]}),"\n",(0,r.jsx)(e.p,{children:"\u6ce8\u610f\uff1a\u5982\u679c\u4f7f\u7528\u4e86-Xmx\u53c2\u6570\uff0c\u5219\u4e0d\u4f1a\u8fdb\u5165\u4e0a\u9762\u7684\u5806\u5927\u5c0f\u7684\u8ba1\u7b97\u903b\u8f91\uff0c\u800c\u76f4\u63a5\u5c06MaxHeapSize\uff08\u6700\u5927\u5806\u5927\u5c0f\uff09\u7b49\u540c\u4e8e\u6211\u4eec\u8bbe\u7f6e\u7684-Xmx\u3002"}),"\n",(0,r.jsx)(e.h2,{id:"openjdk\u76f8\u5173\u6e90\u7801\u89e3\u8bfb",children:"OpenJDK\u76f8\u5173\u6e90\u7801\u89e3\u8bfb"}),"\n",(0,r.jsx)(e.p,{children:"\u6211\u5bf9\u76f8\u5173\u65b9\u6cd5\u505a\u4e86\u6ce8\u91ca\u3002"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"osContainer_linux.cpp"}),"\u662flinux\u7684\u5bb9\u5668\u4fe1\u606f\u7684\u8bfb\u53d6\u548c\u8ba1\u7b97\u7684\u7c7b\u3002\u91cc\u9762\u6709\u5982\u4e0b\u65b9\u6cd5\uff1a"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'/* init\n *\n * Initialize the container support and determine if\n * we are running under cgroup control.\n *\n * \u5bb9\u5668\u73af\u5883\u4e0b\u7684\u521d\u59cb\u5316\u548c\u5224\u5b9a\n *\n */\nvoid OSContainer::init() {\n  int mountid;\n  int parentid;\n  int major;\n  int minor;\n  FILE *mntinfo = NULL;\n  FILE *cgroup = NULL;\n  char buf[MAXPATHLEN+1];\n  char tmproot[MAXPATHLEN+1];\n  char tmpmount[MAXPATHLEN+1];\n  char tmpbase[MAXPATHLEN+1];\n  char *p;\n  //\u662f\u5426\u5df2\u7ecf\u521d\u59cb\u5316\n  assert(!_is_initialized, "Initializing OSContainer more than once");\n\n  _is_initialized = true;\n  _is_containerized = false;\n\n  //\u4fee\u6b63_unlimited_memory\n  _unlimited_memory = (LONG_MAX / os::vm_page_size()) * os::vm_page_size();\n\n  if (PrintContainerInfo) {\n    tty->print_cr("OSContainer::init: Initializing Container Support");\n  }\n  //UseContainerSupport\u6ca1\u6709\u6253\u5f00\u5219\u8df3\u51fa\u53bb\n  if (!UseContainerSupport) {\n    if (PrintContainerInfo) {\n      tty->print_cr("Container Support not enabled");\n    }\n    return;\n  }\n\n  /*\n   *\n   * \u627e\u5230cgroup\u7684\u6302\u8f7d\u70b9\u4fe1\u606f\n   * Find the cgroup mount point for memory and cpuset\n   * by reading /proc/self/mountinfo\n   *\n   * Example for docker:\n   * 219 214 0:29 /docker/7208cebd00fa5f2e342b1094f7bed87fa25661471a4637118e65f1c995be8a34 /sys/fs/cgroup/memory ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,memory\n   *\n   * Example for host:\n   * 34 28 0:29 / /sys/fs/cgroup/memory rw,nosuid,nodev,noexec,relatime shared:16 - cgroup cgroup rw,memory\n   */\n  mntinfo = fopen("/proc/self/mountinfo", "r");\n  if (mntinfo == NULL) {\n      if (PrintContainerInfo) {\n        tty->print_cr("Can\'t open /proc/self/mountinfo, %s",\n                       strerror(errno));\n      }\n      return;\n  }\n\n  while ( (p = fgets(buf, MAXPATHLEN, mntinfo)) != NULL) {\n    // Look for the filesystem type and see if it\'s cgroup\n    char fstype[MAXPATHLEN+1];\n    fstype[0] = \'\\0\';\n    char *s =  strstr(p, " - ");\n    if (s != NULL &&\n        sscanf(s, " - %s", fstype) == 1 &&\n        strcmp(fstype, "cgroup") == 0) {\n\n      if (strstr(p, "memory") != NULL) {\n        int matched = sscanf(p, "%d %d %d:%d %s %s",\n                             &mountid,\n                             &parentid,\n                             &major,\n                             &minor,\n                             tmproot,\n                             tmpmount);\n        if (matched == 6) {\n         //\u5185\u5b58\u4fe1\u606f\n          memory = new CgroupSubsystem(tmproot, tmpmount);\n        }\n        else\n          if (PrintContainerInfo) {\n            tty->print_cr("Incompatible str containing cgroup and memory: %s", p);\n          }\n      } else if (strstr(p, "cpuset") != NULL) {\n        int matched = sscanf(p, "%d %d %d:%d %s %s",\n                             &mountid,\n                             &parentid,\n                             &major,\n                             &minor,\n                             tmproot,\n                             tmpmount);\n        if (matched == 6) {\n          //cpuset: \u7528\u6765\u7ed1\u5b9acgroup\u5230\u6307\u5b9aCPU\u7684\u54ea\u4e2a\u6838\u4e0a\u548cNUMA\u8282\u70b9\n          cpuset = new CgroupSubsystem(tmproot, tmpmount);\n        }\n        else {\n          if (PrintContainerInfo) {\n            tty->print_cr("Incompatible str containing cgroup and cpuset: %s", p);\n          }\n        }\n      } else if (strstr(p, "cpu,cpuacct") != NULL || strstr(p, "cpuacct,cpu") != NULL) {\n        int matched = sscanf(p, "%d %d %d:%d %s %s",\n                             &mountid,\n                             &parentid,\n                             &major,\n                             &minor,\n                             tmproot,\n                             tmpmount);\n        if (matched == 6) {\n          //cpu\uff1a\u7528\u6765\u9650\u5236cgroup\u7684CPU\u4f7f\u7528\u7387\n          cpu = new CgroupSubsystem(tmproot, tmpmount);\n          //cpuacct: \u7528\u6765\u7edf\u8ba1cgroup\u7684CPU\u7684\u4f7f\u7528\u7387\n          cpuacct = new CgroupSubsystem(tmproot, tmpmount);\n        }\n        else {\n          if (PrintContainerInfo) {\n            tty->print_cr("Incompatible str containing cgroup and cpu,cpuacct: %s", p);\n          }\n        }\n      } else if (strstr(p, "cpuacct") != NULL) {\n        int matched = sscanf(p, "%d %d %d:%d %s %s",\n                             &mountid,\n                             &parentid,\n                             &major,\n                             &minor,\n                             tmproot,\n                             tmpmount);\n        if (matched == 6) {\n          cpuacct = new CgroupSubsystem(tmproot, tmpmount);\n        }\n        else {\n          if (PrintContainerInfo) {\n            tty->print_cr("Incompatible str containing cgroup and cpuacct: %s", p);\n          }\n        }\n      } else if (strstr(p, "cpu") != NULL) {\n        int matched = sscanf(p, "%d %d %d:%d %s %s",\n                             &mountid,\n                             &parentid,\n                             &major,\n                             &minor,\n                             tmproot,\n                             tmpmount);\n        if (matched == 6) {\n          cpu = new CgroupSubsystem(tmproot, tmpmount);\n        }\n        else {\n          if (PrintContainerInfo) {\n            tty->print_cr("Incompatible str containing cgroup and cpu: %s", p);\n          }\n        }\n      }\n    }\n  }\n\n  fclose(mntinfo);\n\n  if (memory == NULL) {\n    if (PrintContainerInfo) {\n      tty->print_cr("Required cgroup memory subsystem not found");\n    }\n    return;\n  }\n  if (cpuset == NULL) {\n    if (PrintContainerInfo) {\n      tty->print_cr("Required cgroup cpuset subsystem not found");\n    }\n    return;\n  }\n  if (cpu == NULL) {\n    if (PrintContainerInfo) {\n      tty->print_cr("Required cgroup cpu subsystem not found");\n    }\n    return;\n  }\n  if (cpuacct == NULL) {\n    if (PrintContainerInfo) {\n      tty->print_cr("Required cgroup cpuacct subsystem not found");\n    }\n    return;\n  }\n\n  /*\n   * Read /proc/self/cgroup and map host mount point to\n   * local one via /proc/self/mountinfo content above\n   *\n   * \u8bfb\u53d6 /proc/self/cgroup \u5e76\u901a\u8fc7\u4e0a\u9762\u7684 /proc/self/mountinfo \u5185\u5bb9\u5c06\u672c\u5bb9\u5668\u7684\u5404cgroup\u5b50\u7cfb\u7edf\u7684\u503c\u6620\u5c04\u5230JVM\u53d8\u91cf\u4e0a\n   *\n   * Docker example:\n   * 5:memory:/docker/6558aed8fc662b194323ceab5b964f69cf36b3e8af877a14b80256e93aecb044\n   *\n   * Host example:\n   * 5:memory:/user.slice\n   *\n   * Construct a path to the process specific memory and cpuset\n   * cgroup directory.\n   *\n   * For a container running under Docker from memory example above\n   * the paths would be:\n   *\n   * /sys/fs/cgroup/memory\n   *\n   * For a Host from memory example above the path would be:\n   *\n   * /sys/fs/cgroup/memory/user.slice\n   *\n   */\n  cgroup = fopen("/proc/self/cgroup", "r");\n  if (cgroup == NULL) {\n    if (PrintContainerInfo) {\n      tty->print_cr("Can\'t open /proc/self/cgroup, %s",\n                     strerror(errno));\n      }\n    return;\n  }\n\n  while ( (p = fgets(buf, MAXPATHLEN, cgroup)) != NULL) {\n    int cgno;\n    int matched;\n    char *controller;\n    char *base;\n\n    /* Skip cgroup number */\n    strsep(&p, ":");\n    /* Get controller and base */\n    controller = strsep(&p, ":");\n    base = strsep(&p, "\\n");\n\n    if (controller != NULL) {\n      if (strstr(controller, "memory") != NULL) {\n        memory->set_subsystem_path(base);\n      } else if (strstr(controller, "cpuset") != NULL) {\n        cpuset->set_subsystem_path(base);\n      } else if (strstr(controller, "cpu,cpuacct") != NULL || strstr(controller, "cpuacct,cpu") != NULL) {\n        cpu->set_subsystem_path(base);\n        cpuacct->set_subsystem_path(base);\n      } else if (strstr(controller, "cpuacct") != NULL) {\n        cpuacct->set_subsystem_path(base);\n      } else if (strstr(controller, "cpu") != NULL) {\n        cpu->set_subsystem_path(base);\n      }\n    }\n  }\n\n  fclose(cgroup);\n\n  // We need to update the amount of physical memory now that\n  // command line arguments have been processed.\n  // \u8bfb\u53d6cgroup\u7684\u5185\u5b58\u7ed1\u5b9a\u70b9(/memory.limit_in_bytes)\u7684\u5185\u5b58\u9650\u5236\u503c\uff0c\u5e76\u8bbe\u7f6e\u5230JVM\u5168\u5c40\u7684\u7269\u7406\u5185\u5b58\u5927\u5c0f\u53d8\u91cf\n  if ((mem_limit = memory_limit_in_bytes()) > 0) {\n    os::Linux::set_physical_memory(mem_limit);\n  }\n\n  _is_containerized = true;\n\n}\n\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"arguments.cpp"}),"\u662f\u5bf9\u6211\u4eec\u5404\u79cdJVM\u53c2\u6570\u505a\u89e3\u6790\u548c\u8bbe\u7f6e\u7684\u7c7b\uff0c\u8fd9\u91cc\uff0c\u6211\u5206\u6790\u4e0bset_heap_size\uff08\u8bbe\u7f6e\u5806\u5927\u5c0f\uff09\u8fd9\u4e00\u65b9\u6cd5\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'void Arguments::set_heap_size() {\n  if (!FLAG_IS_DEFAULT(DefaultMaxRAMFraction)) {\n    // Deprecated flag\n    FLAG_SET_CMDLINE(uintx, MaxRAMFraction, DefaultMaxRAMFraction);\n  }\n  //\u5982\u679c\u8bbe\u7f6e\u4e86MaxRAM\uff0c\u5219\u4f7f\u7528\n  julong phys_mem =\n    FLAG_IS_DEFAULT(MaxRAM) ? MIN2(os::physical_memory(), (julong)MaxRAM)\n                            : (julong)MaxRAM;\n\n  // Experimental support for CGroup memory limits\n  //\u5982\u679c\u5f00\u542f\u4e86UseCGroupMemoryLimitForHeap\uff0c\u5219\u8bfb\u53d6cgroup\u7684\u5185\u5b58\uff0c\u6b64\u9009\u9879\u5df2\u662fdeprecate\u9009\u9879\n  if (UseCGroupMemoryLimitForHeap) {\n    // This is a rough indicator that a CGroup limit may be in force\n    // for this process\n    const char* lim_file = "/sys/fs/cgroup/memory/memory.limit_in_bytes";\n    FILE *fp = fopen(lim_file, "r");\n    if (fp != NULL) {\n      julong cgroup_max = 0;\n      int ret = fscanf(fp, JULONG_FORMAT, &cgroup_max);\n      if (ret == 1 && cgroup_max > 0) {\n        // If unlimited, cgroup_max will be a very large, but unspecified\n        // value, so use initial phys_mem as a limit\n        if (PrintGCDetails && Verbose) {\n          // Cannot use gclog_or_tty yet.\n          tty->print_cr("Setting phys_mem to the min of cgroup limit ("\n                        JULONG_FORMAT "MB) and initial phys_mem ("\n                        JULONG_FORMAT "MB)", cgroup_max/M, phys_mem/M);\n        }\n        //\u53d6cpgroup_max\uff08\u6709\u53ef\u80fd\u6ca1\u9650\u5236\uff09\u548c\u7269\u7406\u5185\u5b58\u7684\u6700\u5c0f\u503c\n        phys_mem = MIN2(cgroup_max, phys_mem);\n      } else {\n        warning("Unable to read/parse cgroup memory limit from %s: %s",\n                lim_file, errno != 0 ? strerror(errno) : "unknown error");\n      }\n      fclose(fp);\n    } else {\n      warning("Unable to open cgroup memory limit file %s (%s)", lim_file, strerror(errno));\n    }\n  }\n\n  // Convert Fraction to Precentage values\n  //\u6ce8\uff1aMaxRAMFraction\u3001MinRAMFraction\u3001InitialRAMFraction\u7686\u4e3adeprecate\u53c2\u6570\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\n  if (FLAG_IS_DEFAULT(MaxRAMPercentage) &&\n      !FLAG_IS_DEFAULT(MaxRAMFraction))\n    MaxRAMPercentage = 100.0 / MaxRAMFraction;\n\n   if (FLAG_IS_DEFAULT(MinRAMPercentage) &&\n       !FLAG_IS_DEFAULT(MinRAMFraction))\n     MinRAMPercentage = 100.0 / MinRAMFraction;\n\n   if (FLAG_IS_DEFAULT(InitialRAMPercentage) &&\n       !FLAG_IS_DEFAULT(InitialRAMFraction))\n     InitialRAMPercentage = 100.0 / InitialRAMFraction;\n\n  // If the maximum heap size has not been set with -Xmx,\n  // then set it as fraction of the size of physical memory,\n  // respecting the maximum and minimum sizes of the heap.\n  //\u5982\u679c\u6ca1\u6709\u8bbe\u7f6eXmx\uff0c\u5219\u8fdb\u5165MaxHeapSize\u8ba1\u7b97\u903b\u8f91\n  if (FLAG_IS_DEFAULT(MaxHeapSize)) {\n    julong reasonable_max = (julong)((phys_mem * MaxRAMPercentage) / 100);\n    const julong reasonable_min = (julong)((phys_mem * MinRAMPercentage) / 100);\n    if (reasonable_min < MaxHeapSize) {\n      // Small physical memory, so use a minimum fraction of it for the heap\n      reasonable_max = reasonable_min;\n    } else {\n      // Not-small physical memory, so require a heap at least\n      // as large as MaxHeapSize\n      reasonable_max = MAX2(reasonable_max, (julong)MaxHeapSize);\n    }\n\n    if (!FLAG_IS_DEFAULT(ErgoHeapSizeLimit) && ErgoHeapSizeLimit != 0) {\n      // Limit the heap size to ErgoHeapSizeLimit\n      reasonable_max = MIN2(reasonable_max, (julong)ErgoHeapSizeLimit);\n    }\n    if (UseCompressedOops) {\n      // Limit the heap size to the maximum possible when using compressed oops\n      julong max_coop_heap = (julong)max_heap_for_compressed_oops();\n      if (HeapBaseMinAddress + MaxHeapSize < max_coop_heap) {\n        // Heap should be above HeapBaseMinAddress to get zero based compressed oops\n        // but it should be not less than default MaxHeapSize.\n        max_coop_heap -= HeapBaseMinAddress;\n      }\n      reasonable_max = MIN2(reasonable_max, max_coop_heap);\n    }\n    reasonable_max = limit_by_allocatable_memory(reasonable_max);\n\n    if (!FLAG_IS_DEFAULT(InitialHeapSize)) {\n      // An initial heap size was specified on the command line,\n      // so be sure that the maximum size is consistent.  Done\n      // after call to limit_by_allocatable_memory because that\n      // method might reduce the allocation size.\n      reasonable_max = MAX2(reasonable_max, (julong)InitialHeapSize);\n    }\n\n    if (PrintGCDetails && Verbose) {\n      // Cannot use gclog_or_tty yet.\n      tty->print_cr("  Maximum heap size " SIZE_FORMAT, (size_t) reasonable_max);\n    }\n    FLAG_SET_ERGO(uintx, MaxHeapSize, (uintx)reasonable_max);\n  }\n\n  // If the minimum or initial heap_size have not been set or requested to be set\n  // ergonomically, set them accordingly.\n  //\u5982\u679cInitialHeapSize\u6216min_heap_size\u6ca1\u6709\u8bbe\u7f6e\uff0c\u5219\u8fdb\u5165\u8ba1\u7b97\u903b\u8f91\n  if (InitialHeapSize == 0 || min_heap_size() == 0) {\n    julong reasonable_minimum = (julong)(OldSize + NewSize);\n\n    reasonable_minimum = MIN2(reasonable_minimum, (julong)MaxHeapSize);\n\n    reasonable_minimum = limit_by_allocatable_memory(reasonable_minimum);\n\n    if (InitialHeapSize == 0) {\n      julong reasonable_initial = (julong)((phys_mem * InitialRAMPercentage) / 100);\n\n      reasonable_initial = MAX3(reasonable_initial, reasonable_minimum, (julong)min_heap_size());\n      reasonable_initial = MIN2(reasonable_initial, (julong)MaxHeapSize);\n\n      reasonable_initial = limit_by_allocatable_memory(reasonable_initial);\n\n      if (PrintGCDetails && Verbose) {\n        // Cannot use gclog_or_tty yet.\n        tty->print_cr("  Initial heap size " SIZE_FORMAT, (uintx)reasonable_initial);\n      }\n      FLAG_SET_ERGO(uintx, InitialHeapSize, (uintx)reasonable_initial);\n    }\n    // \u6ca1\u8bbe\u7f6e-Xms\uff0c\u6700\u5c0fheapSize\u4f7f\u7528InitialHeapSize\n    if (min_heap_size() == 0) {\n      set_min_heap_size(MIN2((uintx)reasonable_minimum, InitialHeapSize));\n      if (PrintGCDetails && Verbose) {\n        // Cannot use gclog_or_tty yet.\n        tty->print_cr("  Minimum heap size " SIZE_FORMAT, min_heap_size());\n      }\n    }\n  }\n}\n\n'})}),"\n",(0,r.jsx)(e.h2,{id:"reference",children:"reference"}),"\n",(0,r.jsxs)(e.p,{children:["[1]",(0,r.jsx)(e.a,{href:"http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/hotspot/share/runtime/arguments.cpp#l1750",children:"java11 arguments.cpp"}),(0,r.jsx)(e.br,{}),"\n","[2]",(0,r.jsx)(e.a,{href:"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html",children:"java|Java Platform, Standard Edition Tools Reference"}),(0,r.jsx)(e.br,{}),"\n","[3]",(0,r.jsx)(e.a,{href:"https://lessisbetter.site/2020/09/01/cgroup-3-cpu-md/",children:"Cgroup - cpu, cpuacct, cpuset\u5b50\u7cfb\u7edf|\u5927\u5f6c"}),(0,r.jsx)(e.br,{}),"\n","[4]",(0,r.jsx)(e.a,{href:"https://bugs.openjdk.java.net/browse/JDK-8146115",children:"JDK-8146115"}),(0,r.jsx)(e.br,{}),"\n","[5]",(0,r.jsx)(e.a,{href:"https://github.com/AdoptOpenJDK/openjdk-jdk8u",children:"github-openjdk-jdk8u"}),(0,r.jsx)(e.br,{}),"\n","[6]",(0,r.jsx)(e.a,{href:"https://man7.org/linux/man-pages/man5/proc.5.html",children:"proc(5) \u2014 Linux manual page"}),(0,r.jsx)(e.br,{}),"\n","[7]",(0,r.jsx)(e.a,{href:"https://www.kernel.org/doc/Documentation/filesystems/proc.txt",children:"/proc FILESYSTEM"}),(0,r.jsx)(e.br,{}),"\n","[8]",(0,r.jsx)(e.a,{href:"https://tech.meituan.com/2015/03/31/cgroups.html",children:"Linux\u8d44\u6e90\u7ba1\u7406\u4e4bcgroups\u7b80\u4ecb|\u5927\u9f99\uff0c\u5fd7\u8d85"})]})]})}function l(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}},1780:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>s});var r=t(9474);const i={},a=r.createContext(i);function o(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),r.createElement(a.Provider,{value:e},n.children)}}}]);