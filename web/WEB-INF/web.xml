<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
		  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <display-name>share</display-name>

    <description>sprintMVC环境搭建</description>

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    <!-- 加载Spring配置文件 -->

    <context-param>

        <param-name>contextConfigLocation</param-name>

        <param-value>
            <!--<![CDATA[-->

            <!--]]>-->
            <!--
              Spring可以通过指定classpath*:与classpath:前缀加路径的方式从classpath加载文件,如bean的定义文件.classpath*:的出现是为了从多个jar文件中加载相同的文件.classpath:只能加载找到的第一个文件(顺序取决于jar包的加载顺序).
          -->
            <!--classpath:spring/applicationContext-mvc.xml-->

            <!--classpath:spring/applicationContext-ioc-demo.xml-->
            <!-- 定时器 -->
            <!--classpath:spring/quartz/applicationContext-quartz-demo.xml-->
            <!--classpath:spring/quartz/applicationContext-quartz-config.xml-->

            <!-- datasource -->
            classpath:spring/applicationContext-datasource.xml
            <!--2015.4.13 filter within spring container -->
            <!--classpath:spring/applicationContext-filter.xml-->
            <!-- 2015.4.20 tx -->
            <!--classpath:spring/applicationContext-tx.xml-->
            <!--ums-->
            <!--classpath:spring/applicationContext-checker-ums.xml-->
            <!--classpath:spring/applicationContext-bean-ums.xml-->

            <!-- security -->
            classpath:spring/applicationContext-security.xml

            classpath:spring/applicationContext-myBatis.xml



            <!-- common -->
            classpath:spring/common/applicationContext-common-service.xml
            classpath:spring/api/applicationContext-bean-api.xml


            <!-- manage -->
            classpath:spring/manage/applicationContext-bean-manage.xml
            classpath:spring/blog/applicationContext-bean-blog.xml



        </param-value>

    </context-param>

    <!-- Spring监听将spring的加载改为listener方式 -->
    <listener>
        <listener-class>
            org.springframework.web.context.ContextLoaderListener
        </listener-class>
    </listener>

    <!--  log4j -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:properties/log4j.properties</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    <!--  log4j配置 end -->

    <!-- SpringSecurity related filter  must place before mvc config -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>




    <!-- Spring MVC配置 -->

    <!-- <servlet>

         <servlet-name>Dispatcher</servlet-name>

         <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

         &lt;!&ndash; 自定义spring mvc的配置文件名称和路径 &ndash;&gt;

         <init-param>

             <param-name>contextConfigLocation</param-name>

             <param-value>classpath:spring/spring-servlet.xml</param-value>

         </init-param>

         <load-on-startup>1</load-on-startup>

     </servlet>
         spring mvc 请求后缀 -->

    <!-- <servlet-mapping>

         <servlet-name>Dispatcher</servlet-name>

         <url-pattern>/</url-pattern>

     </servlet-mapping>-->

    <!-- spring mvc配置  -->
    <!-- spring mvc dispatcher -->
    <!--<servlet>
        <servlet-name>dispatcherSpringMvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/shareSite/common/applicationContext-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    &lt;!&ndash; spring mvc 请求后缀 &ndash;&gt;
    <servlet-mapping>
        <servlet-name>dispatcherSpringMvc</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>-->
    <!-- Spring MVC DispatcherServlet+restful -->
    <servlet>
        <servlet-name>springMvcDispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/applicationContext-springMVC-restful.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springMvcDispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 解决HTTP PUT请求Spring无法获取请求参数的问题 -->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <servlet-name>springMvcDispatcher</servlet-name>
    </filter-mapping>

    <!--<servlet>
        <servlet-name>springMvcDispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/dispatcher-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springMvcDispatcher</servlet-name>
        <url-pattern>*.service</url-pattern>
    </servlet-mapping>-->

    <!--to see jmmz -->
    <!--
     <servlet>
          <servlet-name>BlazedsSpringMvc</servlet-name>
          <servlet-class>
              org.springframework.web.servlet.DispatcherServlet
          </servlet-class>
          <init-param>
              <param-name>contextConfigLocation</param-name>
              <param-value>
                  classpath:spring/springmvc-blazeds.xml
              </param-value>
          </init-param>
          <load-on-startup>1</load-on-startup>
      </servlet>

      <servlet-mapping>
          <servlet-name>BlazedsSpringMvc</servlet-name>
          <url-pattern>/messagebroker/*</url-pattern>
      </servlet-mapping>-->

    <!-- spring mvc dispatcher end -->

    <!-- jersey REST Services -->
    <!--<servlet>
        <servlet-name>Rest_Servlet</servlet-name>
        <servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
        <init-param>
            <param-name>com.sun.jersey.config.property.packages</param-name>
            <param-value>examples.tea.rest</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>Rest_Servlet</servlet-name>
        &lt;!&ndash; Redirect any calls to our jersey servlet &ndash;&gt;
        <url-pattern>/rest/*</url-pattern>
    </servlet-mapping>
    &lt;!&ndash; REST Services end &ndash;&gt;
    -->
    <!--  character encoding  -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--/. famous charactor encoding -->

    <!-- 2015.4.10 login overlapping filter -->
    <!--<filter>-->
    <!--<filter-name>singleLoginFilter</filter-name>-->
    <!--<filter-class> com.tea.frame.ums.SingleLoginFilter-->
    <!--</filter-class>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
    <!--<filter-name>singleLoginFilter</filter-name>-->
    <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->
    <!--2015.4.13 filter trusteeship within spring-->
    <!--<filter>-->
    <!--<filter-name>singleLoginFilter</filter-name>-->
    <!--<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>-->
    <!--<init-param>-->
    <!--<param-name>targetFilterLifecycle</param-name>-->
    <!--<param-value>true</param-value>-->
    <!--</init-param>-->
    <!--</filter>-->

    <!--<filter-mapping>-->
    <!--<filter-name>singleLoginFilter</filter-name>-->
    <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->
    <!--/.login overlapping filter-->

    <!--session scope inactive:min-->
    <session-config>
        <session-timeout>6000</session-timeout>
    </session-config>
    <!--/.session scope inactive:min-->

   <!-- <welcome-file-list>

        <welcome-file>index.html</welcome-file>

    </welcome-file-list>-->

    <error-page>
        <error-code>401</error-code>
        <location>/page/httpCode/401.jsp</location>
    </error-page>

    <error-page>
        <error-code>404</error-code>
        <location>/page/httpCode/404.jsp</location>
    </error-page>

    <error-page>
        <error-code>405</error-code>
        <location>/page/httpCode/405.jsp</location>
    </error-page>

    <error-page>
        <error-code>415</error-code>
        <location>/page/httpCode/415.jsp</location>
    </error-page>

    <error-page>
        <error-code>500</error-code>
        <location>/page/httpCode/500.jsp</location>
    </error-page>
</web-app>